process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'

const consulPromisify = require('./lib/ab-consul-promisify')
const { initConsul } = require('./lib/ab-consul')

const command = process.argv[2]
const key = process.argv[3]
const value = process.argv[4]

const validCommands = [
  'set-kv',
  'get-kv',
  'check-key-exists',
  'del-kv'
]

if (validCommands.indexOf(command) === -1) {
  const validOptions = validCommands
    .map(command => `"${command}"`)
    .join(', ')

  throw new Error(`Please specify one of: ${validOptions} as first argument`)
}

if (!key) {
  throw new Error(`Unable to perform ${command} operation: no key supplied`)
}

const regex = /.*\/.+/
if (!regex.test(key)) {
  throw new Error(`Invalid key: supplied ${key}, expected a key with prefix "<deployment-name>/"`)
}

module.exports = (consul) => {
  if (!consul) {
    consul = initConsul()
  }

  (async () => {
    const { delKv, getPeers, kvExists, getKv, setKv } = consulPromisify(consul)
  
    const checkKeyExists = async () => {
      const keyExists = await kvExists(key)
      console.log(!!keyExists)
    }
    
    const delKeyValue = async () => {
      await delKv(key)
    }
    
    const setKeyValue = async () => {
      if (value === undefined) {
        throw new Error(`Unable to set ${key}: no value supplied`)
      }
    
      const success = await setKv(key, value)
      if (success) {
        console.log(`OK\n${key} set successfully`)
      } else {
        throw new Error('Unable to write to consul. Please check your "CONSUL_TOKEN" and its relative ACL permissions')
      }
    }
    
    const getKeyValue = async () => {
      const keyExists = await kvExists(key)
      if (keyExists) {
        const retrievedKey = await getKv(key)
        console.log(retrievedKey)
      } else {
        throw new Error(`Consul key ${key} does not exist`)
      }
    }
    
    const checkConnection = async () => {
      const peers = await getPeers()
      if (process.env.DEBUG !== undefined) {
        console.log(`consul is online - ${peers.length} peers`)
      }
    }
  
    try {
      await checkConnection()
  
      if (command === 'set-kv') {
        await setKeyValue()
      }
  
      if (command === 'get-kv') {
        await getKeyValue()
      }
  
      if (command === 'check-key-exists') {
        await checkKeyExists()
      }
  
      if (command === 'del-kv') {
        await delKeyValue()
      }
    } catch (err) {
      console.error(err)
    }
  })()
}